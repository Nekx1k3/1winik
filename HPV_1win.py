from requests import Session
from urllib.parse import unquote, parse_qs
from colorama import Fore
from datetime import datetime, timedelta
from threading import Thread, Lock
from typing import Literal
from random import randint, shuffle
from os import system as sys
from platform import system as s_name
from time import sleep
from re import sub
from json import loads

from Core.Tools.HPV_Banner import HPV_Banner
from Core.Tools.HPV_Config_Check import HPV_Config_Check
from Core.Tools.HPV_Upgrade import HPV_Upgrade_Alert
from Core.Tools.HPV_Getting_File_Paths import HPV_Get_Config, HPV_Get_Empty_Request, HPV_Get_Accept_Language

from Core.Config.HPV_Config import *







class HPV_1win:
    '''
    AutoBot Ferma /// HPV
    ---------------------
    [1] - `–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏`
    
    [2] - `–°–±–æ—Ä –º–æ–Ω–µ—Ç –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤`
    
    [3] - `–ü–æ–ª—É—á–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã`
    
    [4] - `–£–ª—É—á—à–µ–Ω–∏–µ –±—É—Å—Ç–æ–≤`
    
    [5] - `–ê–ø–≥—Ä–µ–π–¥ –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ —É—Ä–æ–≤–Ω—è`
    
    [6] - `30 –º–∏–Ω—É—Ç –±–µ—Å–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ —Ç–∞–ø–∞–Ω–∏—è`
    
    [7] - `–û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç 3 –¥–æ 5 —á–∞—Å–æ–≤`
    
    [8] - `–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π —á–µ—Ä–µ–∑ 3-5 —á–∞—Å–∞`
    '''



    def __init__(self, Name: str, URL: str, Proxy: dict, Headers: dict) -> None:
        self.HPV_PRO = Session()       # –°–æ–∑–¥–∞–Ω–∏–µ `requests` —Å–µ—Å—Å–∏–∏
        self.Name = Name               # –ù–∏–∫ –∞–∫–∫–∞—É–Ω—Ç–∞
        self.Proxy = Proxy             # –ü—Ä–æ–∫—Å–∏ (–ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏)

        INFO = self.URL_Clean(URL)
        self.TG_ID = INFO['ID']        # ID –∞–∫–∫–∞—É–Ω—Ç–∞
        self.URL = INFO['URL']         # –£–Ω–∏–∫–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ mini app
        self.Domain = INFO['Domain']   # –î–æ–º–µ–Ω –∏–≥—Ä—ã

        # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è Headers
        self.USER_AGENT = Headers['USER_AGENT']
        self.SEC_CH_UA = Headers['SEC_CH_UA']
        self.SEC_CH_UA_MOBILE = Headers['SEC_CH_UA_MOBILE']
        self.SEC_CH_UA_PLATFORM = Headers['SEC_CH_UA_PLATFORM']
        self.X_REQUESTED_WITH = Headers['X_REQUESTED_WITH']
        self.ACCEPT_LANGUAGE = self.Get_Accept_Language()

        self.Token = self.Authentication()   # –¢–æ–∫–µ–Ω –∞–∫–∫–∞—É–Ω—Ç–∞



    def URL_Clean(self, URL: str) -> dict:
        '''–û—á–∏—Å—Ç–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ –æ—Ç –ª–∏—à–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤'''

        try:
            ID = str(loads(unquote(unquote(unquote(URL.split('tgWebAppData=')[1].split('&tgWebAppVersion')[0]))).split('&')[1].split('user=')[1])['id'])
        except:
            ID = ''

        try:
            _URL = {KEY: VALUE[0] for KEY, VALUE in parse_qs(unquote(unquote(unquote(URL.split('#tgWebAppData=')[1].split('&tgWebAppVersion')[0])))).items()}
        except:
            _URL = ''

        return {'ID': ID, 'URL': _URL, 'Domain': 'https://crypto-clicker-backend-go-prod.100hp.app/'}



    def Current_Time(self) -> str:
        '''–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è'''

        return Fore.BLUE + f'{datetime.now().strftime("%Y-%m-%d %H:%M:%S")}'



    def Logging(self, Type: Literal['Success', 'Warning', 'Error'], Smile: str, Text: str) -> None:
        '''–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ'''

        with Console_Lock:
            COLOR = Fore.GREEN if Type == 'Success' else Fore.YELLOW if Type == 'Warning' else Fore.RED # –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞
            DIVIDER = Fore.BLACK + ' | '   # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å

            Time = self.Current_Time()        # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
            Name = Fore.MAGENTA + self.Name   # –ù–∏–∫ –∞–∫–∫–∞—É–Ω—Ç–∞
            Smile = COLOR + str(Smile)        # –°–º–∞–π–ª–∏–∫
            Text = COLOR + Text               # –¢–µ–∫—Å—Ç –ª–æ–≥–∞

            print(Time + DIVIDER + Smile + DIVIDER + Text + DIVIDER + Name)



    def Get_Accept_Language(self) -> str:
        '''–ü–æ–ª—É—á–µ–Ω–∏–µ —è–∑—ã–∫–æ–≤–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞, –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –ø–æ–¥ IP'''

        Accept_Language = HPV_Get_Accept_Language() # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å —è–∑—ã–∫–æ–≤—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω—ã –ø–æ IP
        try:
            COUNTRY = self.HPV_PRO.get('https://ipwho.is/', proxies=self.Proxy).json()['country_code'].upper()
        except:
            COUNTRY = ''

        return Accept_Language.get(COUNTRY, 'en-US,en;q=0.9')



    def Authentication(self) -> str:
        '''–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞'''

        URL = self.Domain + 'game/start'
        HEADERS_1 = {'User-Agent': self.USER_AGENT, 'Accept': 'application/json, text/plain, */*', 'sec-ch-ua': self.SEC_CH_UA, 'content-type': 'multipart/form-data; boundary=----WebKitFormBoundarySnDW4AzsItae5rbR', 'sec-ch-ua-mobile': self.SEC_CH_UA_MOBILE, 'x-user-id': self.TG_ID, 'sec-ch-ua-platform': self.SEC_CH_UA_PLATFORM, 'origin': 'https://cryptocklicker-frontend-rnd-prod.100hp.app', 'x-requested-with': self.X_REQUESTED_WITH, 'sec-fetch-site': 'same-site', 'sec-fetch-mode': 'cors', 'sec-fetch-dest': 'empty', 'referer': 'https://cryptocklicker-frontend-rnd-prod.100hp.app/', 'accept-language': self.ACCEPT_LANGUAGE}
        HEADERS_2 = {'User-Agent': self.USER_AGENT, 'access-control-request-method': 'POST', 'access-control-request-headers': 'x-user-id', 'origin': 'https://cryptocklicker-frontend-rnd-prod.100hp.app', 'sec-fetch-mode': 'cors', 'x-requested-with': self.X_REQUESTED_WITH, 'sec-fetch-site': 'same-site', 'sec-fetch-dest': 'empty', 'referer': 'https://cryptocklicker-frontend-rnd-prod.100hp.app/', 'accept-language': self.ACCEPT_LANGUAGE}

        self.Empty_Request('Authentication_1') # –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
        self.Empty_Request('Authentication_2') # –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
        self.Empty_Request('Authentication_3') # –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
        self.Empty_Request('Authentication_4') # –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
        self.Empty_Request('Authentication_5') # –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
        self.Empty_Request('Authentication_6') # –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
        self.Empty_Request('Authentication_7') # –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
        self.Empty_Request('Authentication_8') # –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
        self.Empty_Request('Authentication_9') # –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
        self.Empty_Request('Authentication_10') # –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
        self.Empty_Request('Authentication_11') # –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
        self.Empty_Request('Authentication_12') # –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å

        try:
            self.HPV_PRO.options(URL, headers=HEADERS_2, params=self.URL, proxies=self.Proxy) # –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
            Token = self.HPV_PRO.post(URL, headers=HEADERS_1, params=self.URL, proxies=self.Proxy).json()['token']
            self.Logging('Success', 'üü¢', '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!')
            return Token
        except:
            self.Logging('Error', 'üî¥', '–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏!')
            return ''



    def ReAuthentication(self) -> None:
        '''–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞'''

        self.Token = self.Authentication()



    def Empty_Request(self, Empty: str) -> None:
        '''–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—É—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –ø–æ–¥–≥—Ä—É–∑–∫–æ–π –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–π —Å–∞–π—Ç–∞, —á—Ç–æ–±—ã –∫–∞–∑–∞—Ç—å—Å—è —á–µ–ª–æ–≤–µ–∫–æ–º'''

        Request: dict = HPV_Get_Empty_Request()[Empty]

        for header_key in list(Request['Headers'].keys()):
            header_key_lower = header_key.lower()

            if header_key_lower == 'user-agent':
                Request['Headers'][header_key] = self.USER_AGENT
            elif header_key_lower == 'sec-ch-ua':
                Request['Headers'][header_key] = self.SEC_CH_UA
            elif header_key_lower == 'sec-ch-ua-mobile':
                Request['Headers'][header_key] = self.SEC_CH_UA_MOBILE
            elif header_key_lower == 'authorization':
                Request['Headers'][header_key] = f'Bearer {self.Token}'
            elif header_key_lower == 'x-user-id':
                Request['Headers'][header_key] = self.TG_ID
            elif header_key_lower == 'sec-ch-ua-platform':
                Request['Headers'][header_key] = self.SEC_CH_UA_PLATFORM
            elif header_key_lower == 'x-requested-with':
                Request['Headers'][header_key] = self.X_REQUESTED_WITH
            elif header_key_lower == 'accept-language':
                Request['Headers'][header_key] = self.ACCEPT_LANGUAGE

        try:
            self.HPV_PRO.request(method=Request['Method'], url=Request['Url'], params=Request.get('Params'), data=Request.get('Data'), json=Request.get('Json'), headers=Request.get('Headers'), proxies=self.Proxy)
        except:
            pass



    def Get_Info(self) -> dict:
        '''–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–ª–∞–Ω—Å–µ, –ø—Ä–∏–±—ã–ª–∏ –≤ —á–∞—Å –∏ —Å–∏–ª–µ –∫–ª–∏–∫–∞'''

        URL = self.Domain + 'user/balance'
        HEADERS = {'User-Agent': self.USER_AGENT, 'sec-ch-ua': self.SEC_CH_UA, 'sec-ch-ua-mobile': self.SEC_CH_UA_MOBILE, 'authorization': f'Bearer {self.Token}', 'x-user-id': self.TG_ID, 'sec-ch-ua-platform': self.SEC_CH_UA_PLATFORM, 'origin': 'https://cryptocklicker-frontend-rnd-prod.100hp.app', 'x-requested-with': self.X_REQUESTED_WITH, 'sec-fetch-site': 'same-site', 'sec-fetch-mode': 'cors', 'sec-fetch-dest': 'empty', 'referer': 'https://cryptocklicker-frontend-rnd-prod.100hp.app/', 'accept-language': self.ACCEPT_LANGUAGE}

        self.Empty_Request('Authentication_13') # –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
        self.Empty_Request('Authentication_14') # –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
        self.Empty_Request('Authentication_15') # –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
        self.Empty_Request('Balance_1') # –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
        self.Empty_Request('Balance_2') # –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
        self.Empty_Request('Balance_3') # –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
        self.Empty_Request('Balance_4') # –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
        self.Empty_Request('Balance_5') # –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
        self.Empty_Request('Balance_6') # –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
        self.Empty_Request('Balance_7') # –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
        self.Empty_Request('Balance_1') # –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
        self.Empty_Request('Balance_8') # –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å

        try:
            HPV = self.HPV_PRO.get(URL, headers=HEADERS, proxies=self.Proxy).json()

            Balance = HPV['coinsBalance'] # –ë–∞–ª–∞–Ω—Å
            Hour_Profit = HPV['miningPerHour'] # –ü—Ä–∏–±—ã–ª—å –≤ —á–∞—Å
            Click_Power = HPV['coinsPerClick'] # –°–∏–ª–∞ –∫–ª–∏–∫–∞

            return {'Balance': f'{Balance:,}', 'Hour_Profit': f'{Hour_Profit:,}', 'Click_Power': f'{Click_Power:,}'}
        except:
            return {'Balance': '0', 'Hour_Profit': '0', 'Click_Power': '0'}



    def Get_Config(self, Type: str) -> list:
        '''–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞—Ö 1win'''

        URL = self.Domain + 'game/config'
        HEADERS = {'User-Agent': self.USER_AGENT, 'sec-ch-ua': self.SEC_CH_UA, 'sec-ch-ua-mobile': self.SEC_CH_UA_MOBILE, 'authorization': f'Bearer {self.Token}', 'x-user-id': self.TG_ID, 'sec-ch-ua-platform': self.SEC_CH_UA_PLATFORM, 'origin': 'https://cryptocklicker-frontend-rnd-prod.100hp.app', 'x-requested-with': self.X_REQUESTED_WITH, 'sec-fetch-site': 'same-site', 'sec-fetch-mode': 'cors', 'sec-fetch-dest': 'empty', 'referer': 'https://cryptocklicker-frontend-rnd-prod.100hp.app/', 'accept-language': self.ACCEPT_LANGUAGE}

        self.Empty_Request('Balance_3') # –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å

        try:
            HPV = loads(self.HPV_PRO.get(URL, headers=HEADERS, proxies=self.Proxy).json())
            return HPV[Type]
        except:
            return []



    def Run_Tasks(self, Task: dict) -> None:
        '''–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è'''

        URL = self.Domain + 'tasks/subscription'
        HEADERS_1 = {'User-Agent': self.USER_AGENT, 'sec-ch-ua': self.SEC_CH_UA, 'sec-ch-ua-mobile': self.SEC_CH_UA_MOBILE, 'authorization': f'Bearer {self.Token}', 'x-user-id': self.TG_ID, 'sec-ch-ua-platform': self.SEC_CH_UA_PLATFORM, 'origin': 'https://cryptocklicker-frontend-rnd-prod.100hp.app', 'x-requested-with': self.X_REQUESTED_WITH, 'sec-fetch-site': 'same-site', 'sec-fetch-mode': 'cors', 'sec-fetch-dest': 'empty', 'referer': 'https://cryptocklicker-frontend-rnd-prod.100hp.app/', 'accept-language': self.ACCEPT_LANGUAGE}
        HEADERS_2 = {'User-Agent': self.USER_AGENT, 'access-control-request-method': 'POST', 'access-control-request-headers': 'authorization,x-user-id', 'origin': 'https://cryptocklicker-frontend-rnd-prod.100hp.app', 'sec-fetch-mode': 'cors', 'x-requested-with': self.X_REQUESTED_WITH, 'sec-fetch-site': 'same-site', 'sec-fetch-dest': 'empty', 'referer': 'https://cryptocklicker-frontend-rnd-prod.100hp.app/', 'accept-language': self.ACCEPT_LANGUAGE}
        PARAMS = {'task_id': Task['id']}

        try:
            for Num in range(1, 3):
                if Num == 2:
                    sleep(randint(3, 6)) # –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ

                self.HPV_PRO.options(URL, headers=HEADERS_2, params=PARAMS, proxies=self.Proxy) # –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
                HPV = self.HPV_PRO.post(URL, headers=HEADERS_1, params=PARAMS, proxies=self.Proxy).json()

                self.Empty_Request('Balance_2') # –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
                self.Empty_Request('Balance_5') # –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
                self.Empty_Request('Balance_1') # –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
                self.Empty_Request('Balance_4') # –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
                self.Empty_Request('user_profit_options') # –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
                self.Empty_Request('user_profit_get') # –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å

                if Num == 2 and HPV['isCollected']:
                    self.Logging('Success', '‚ö°Ô∏è', f'–ó–∞–¥–∞–Ω–∏–µ —Å {Task["type"]} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ! +{HPV["money"]:,}')
        except:
            pass



    def AutoTasks(self) -> None:
        '''–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏'''

        try:
            Tasks = self.Get_Config('Quests') # –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π

            self.Empty_Request('favicon_ico') # –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å

            # –°—Ç–∞—Ä—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π
            for Task in Tasks:
                self.Run_Tasks(Task) # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
                sleep(randint(2, 5)) # –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ
        except:
            pass



    def Referal_Claim(self) -> dict:
        '''–°–±–æ—Ä –º–æ–Ω–µ—Ç –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤'''

        URL_1 = self.Domain + 'friends/collect'
        URL_2 = self.Domain + 'friends?offset=0&limit=5'
        HEADERS = {'User-Agent': self.USER_AGENT, 'sec-ch-ua': self.SEC_CH_UA, 'sec-ch-ua-mobile': self.SEC_CH_UA_MOBILE, 'authorization': f'Bearer {self.Token}', 'x-user-id': self.TG_ID, 'sec-ch-ua-platform': self.SEC_CH_UA_PLATFORM, 'origin': 'https://cryptocklicker-frontend-rnd-prod.100hp.app', 'x-requested-with': self.X_REQUESTED_WITH, 'sec-fetch-site': 'same-site', 'sec-fetch-mode': 'cors', 'sec-fetch-dest': 'empty', 'referer': 'https://cryptocklicker-frontend-rnd-prod.100hp.app/', 'accept-language': self.ACCEPT_LANGUAGE}

        self.Empty_Request('AutoRefClaim_1') # –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
        self.Empty_Request('favicon_ico') # –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å

        try:
            RefClaim = self.HPV_PRO.get(URL_2, headers=HEADERS, proxies=self.Proxy).json()['total_coins'] # –ù–∞–ª–∏—á–∏–µ –º–æ–Ω–µ—Ç –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤

            if RefClaim:
                HPV = self.HPV_PRO.post(URL_1, headers=HEADERS, proxies=self.Proxy).json()['coinsCollected']
                self.Empty_Request('AutoRefClaim_1') # –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
                self.Empty_Request('AutoRefClaim_2') # –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
                return {'Status': True, 'Collected': f'{HPV:,}'}

            return {'Status': False}
        except:
            return {'Status': False}



    def AutoRefClaim(self) -> None:
        '''–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–±–æ—Ä –º–æ–Ω–µ—Ç –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤'''

        try:
            Referal_Claim = self.Referal_Claim() # –°–±–æ—Ä –º–æ–Ω–µ—Ç –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤

            if Referal_Claim['Status']:
                self.Logging('Success', 'üü¢', f'–ú–æ–Ω–µ—Ç—ã –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ —Å–æ–±—Ä–∞–Ω—ã! +{Referal_Claim["Collected"]}')
                sleep(randint(3, 6)) # –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ
        except:
            pass



    def Get_Card_ID(self, ID: str) -> dict:
        '''–ü–æ–ª—É—á–µ–Ω–∏–µ ID –∫–∞—Ä—Ç–æ—á–µ–∫'''

        URL = self.Domain + 'minings'
        HEADERS = {'User-Agent': self.USER_AGENT, 'sec-ch-ua': self.SEC_CH_UA, 'sec-ch-ua-mobile': self.SEC_CH_UA_MOBILE, 'authorization': f'Bearer {self.Token}', 'x-user-id': self.TG_ID, 'sec-ch-ua-platform': self.SEC_CH_UA_PLATFORM, 'origin': 'https://cryptocklicker-frontend-rnd-prod.100hp.app', 'x-requested-with': self.X_REQUESTED_WITH, 'sec-fetch-site': 'same-site', 'sec-fetch-mode': 'cors', 'sec-fetch-dest': 'empty', 'referer': 'https://cryptocklicker-frontend-rnd-prod.100hp.app/', 'accept-language': self.ACCEPT_LANGUAGE}

        self.Empty_Request('minings_options_get') # –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å

        try:
            HPV = self.HPV_PRO.get(URL, headers=HEADERS, proxies=self.Proxy).json()

            for CARD in HPV:
                if ID in CARD['id']:
                    return {'Status': True, 'Current': CARD['level'], 'New': f'{ID}{CARD["level"] + 1}'}

            return {'Status': True, 'Current': 0, 'New': f'{ID}1'}
        except:
            return {'Status': False}



    def Upgrade_Card(self, ID: str) -> bool:
        '''–ê–ø–≥—Ä–µ–π–¥ –∫–∞—Ä—Ç–æ—á–µ–∫'''

        URL = self.Domain + 'minings'
        HEADERS = {'User-Agent': self.USER_AGENT, 'sec-ch-ua': self.SEC_CH_UA, 'sec-ch-ua-mobile': self.SEC_CH_UA_MOBILE, 'authorization': f'Bearer {self.Token}', 'x-user-id': self.TG_ID, 'sec-ch-ua-platform': self.SEC_CH_UA_PLATFORM, 'origin': 'https://cryptocklicker-frontend-rnd-prod.100hp.app', 'x-requested-with': self.X_REQUESTED_WITH, 'sec-fetch-site': 'same-site', 'sec-fetch-mode': 'cors', 'sec-fetch-dest': 'empty', 'referer': 'https://cryptocklicker-frontend-rnd-prod.100hp.app/', 'accept-language': self.ACCEPT_LANGUAGE}
        JSON = {'id': ID}

        self.Empty_Request('minings_options_post') # –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å

        try:
            self.HPV_PRO.post(URL, headers=HEADERS, json=JSON, proxies=self.Proxy).json()['totalProfit']
            return True
        except:
            return False



    def AutoUpgradeCard(self) -> None:
        '''–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–ø–≥—Ä–µ–π–¥ –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ —É—Ä–æ–≤–Ω—è'''

        try:
            Updates = {}
            CARDS = list(set(sub(r'\d+', '', CARD['id']) for CARD in self.Get_Config('PassiveProfit'))) # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–µ–∫

            self.Empty_Request('favicon_ico') # –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
            self.Empty_Request('minings_options_get') # –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
            self.Empty_Request('tasks_everydayreward_options_get') # –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
            self.Empty_Request('energy_improvements_options_get') # –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
            self.Empty_Request('energy_bonus_options') # –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
            self.Empty_Request('minings_get') # –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
            self.Empty_Request('tasks_everydayreward_get') # –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
            self.Empty_Request('energy_improvements_get') # –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
            self.Empty_Request('energy_bonus_get') # –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
            self.Empty_Request('AutoRefClaim_1') # –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
            self.Empty_Request('AutoRefClaim_2') # –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å

            while True:
                # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–∏–∫–ª–∞, –µ—Å–ª–∏ –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —É–ª—É—á—à–µ–Ω—ã (–∏–ª–∏ –Ω–µ—Ç) –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ —É—Ä–æ–≤–Ω—è
                if all(Updates) and len(Updates) == len(CARDS): break

                for CARD in CARDS:
                    CARD_ID = self.Get_Card_ID(CARD) # –ü–æ–ª—É—á–µ–Ω–∏–µ ID –∫–∞—Ä—Ç–æ—á–∫–∏

                    if CARD_ID['Current'] < MAX_LVL:
                        if self.Upgrade_Card(CARD_ID['New']): # –ê–ø–≥—Ä–µ–π–¥ –∫–∞—Ä—Ç–æ—á–∫–∏
                            self.Logging('Success', 'üü¢', f'–ê–ø–≥—Ä–µ–π–¥ {CARD} —É—Å–ø–µ—à–µ–Ω! –ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å: {CARD_ID["New"][-1]}')
                        else:
                            Updates[CARD] = True

                        self.Empty_Request('minings_options_get') # –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
                        self.Empty_Request('minings_get') # –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
                        sleep(randint(2, 5)) # –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ

                    else:
                        Updates[CARD] = True
        except:
            pass



    def Daily_Reward(self) -> dict:
        '''–ü–æ–ª—É—á–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã'''

        URL = self.Domain + 'tasks/everydayreward'
        HEADERS = {'User-Agent': self.USER_AGENT, 'sec-ch-ua': self.SEC_CH_UA, 'sec-ch-ua-mobile': self.SEC_CH_UA_MOBILE, 'authorization': f'Bearer {self.Token}', 'x-user-id': self.TG_ID, 'sec-ch-ua-platform': self.SEC_CH_UA_PLATFORM, 'origin': 'https://cryptocklicker-frontend-rnd-prod.100hp.app', 'x-requested-with': self.X_REQUESTED_WITH, 'sec-fetch-site': 'same-site', 'sec-fetch-mode': 'cors', 'sec-fetch-dest': 'empty', 'referer': 'https://cryptocklicker-frontend-rnd-prod.100hp.app/', 'accept-language': self.ACCEPT_LANGUAGE}
        Reward = {1000: '1', 1500: '2', 2000: '3', 3000: '4', 4000: '5', 5000: '6', 6000: '7', 7000: '8', 8000: '9', 10000: '10', 13000: '11', 16000: '12', 20000: '13', 25000: '14', 30000: '15', 40000: '16', 50000: '17', 70000: '18', 90000: '19', 100000: '20', 125000: '21', 150000: '22', 200000: '23', 300000: '24'}

        self.Empty_Request('tasks_everydayreward_options_post') # –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å

        try:
            HPV = self.HPV_PRO.post(URL, headers=HEADERS, proxies=self.Proxy).json()['collectedCoins']
            return {'Status': True, 'Collected': f'{HPV:,}', 'Day': f'{Reward[HPV]}'}
        except:
            return {'Status': False}



    def AutoDailyReward(self) -> None:
        '''–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã'''

        URL = self.Domain + 'tasks/everydayreward'
        HEADERS = {'User-Agent': self.USER_AGENT, 'sec-ch-ua': self.SEC_CH_UA, 'sec-ch-ua-mobile': self.SEC_CH_UA_MOBILE, 'authorization': f'Bearer {self.Token}', 'x-user-id': self.TG_ID, 'sec-ch-ua-platform': self.SEC_CH_UA_PLATFORM, 'origin': 'https://cryptocklicker-frontend-rnd-prod.100hp.app', 'x-requested-with': self.X_REQUESTED_WITH, 'sec-fetch-site': 'same-site', 'sec-fetch-mode': 'cors', 'sec-fetch-dest': 'empty', 'referer': 'https://cryptocklicker-frontend-rnd-prod.100hp.app/', 'accept-language': self.ACCEPT_LANGUAGE}

        self.Empty_Request('Balance_1') # –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
        self.Empty_Request('Balance_4') # –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
        self.Empty_Request('user_profit_options') # –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
        self.Empty_Request('user_profit_get') # –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
        self.Empty_Request('tasks_everydayreward_options_get') # –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å

        try:
            HPV = self.HPV_PRO.get(URL, headers=HEADERS, proxies=self.Proxy).json()['days']

            if not all(Day['isCollected'] for Day in HPV):
                Daily_Reward = self.Daily_Reward() # –ü–æ–ª—É—á–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã

                if Daily_Reward['Status']:
                    self.Logging('Success', 'üü¢', f'–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞! –î–µ–Ω—å: {Daily_Reward["Day"]}! +{Daily_Reward["Collected"]}')

                    self.Empty_Request('tasks_everydayreward_options_get') # –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
                    self.Empty_Request('tasks_everydayreward_get') # –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
                    sleep(randint(3, 6)) # –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ
        except:
            pass



    def Click(self) -> None:
        '''–°–æ–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–∞–ø–æ–≤'''

        URL = self.Domain + 'tap'
        HEADERS = {'User-Agent': self.USER_AGENT, 'sec-ch-ua': self.SEC_CH_UA, 'sec-ch-ua-mobile': self.SEC_CH_UA_MOBILE, 'authorization': f'Bearer {self.Token}', 'x-user-id': self.TG_ID, 'sec-ch-ua-platform': self.SEC_CH_UA_PLATFORM, 'origin': 'https://cryptocklicker-frontend-rnd-prod.100hp.app', 'x-requested-with': self.X_REQUESTED_WITH, 'sec-fetch-site': 'same-site', 'sec-fetch-mode': 'cors', 'sec-fetch-dest': 'empty', 'referer': 'https://cryptocklicker-frontend-rnd-prod.100hp.app/', 'accept-language': self.ACCEPT_LANGUAGE}
        JSON = {'tapsCount': randint(COINS[0], COINS[1])}

        self.Empty_Request('tap_options') # –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å

        try:
            self.HPV_PRO.post(URL, headers=HEADERS, json=JSON, proxies=self.Proxy)
            self.Logging('Success', 'üü¢', '–¢–∞–ø —Å–æ–≤–µ—Ä—à—ë–Ω!')
        except:
            self.Logging('Error', 'üî¥', '–ù–µ —É–¥–∞–ª–æ—Å—å —Ç–∞–ø–Ω—É—Ç—å!')



    def AutoClick(self) -> None:
        '''30 –º–∏–Ω—É—Ç –±–µ—Å–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ —Ç–∞–ø–∞–Ω–∏—è'''

        try:
            for _ in range(randint(900, 1_800)):
                self.Click()
                sleep(randint(1, 2)) # –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ
        except:
            pass



    def Get_Boosts(self) -> list:
        '''–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±—É—Å—Ç–æ–≤'''

        URL = self.Domain + 'energy/improvements'
        HEADERS = {'User-Agent': self.USER_AGENT, 'sec-ch-ua': self.SEC_CH_UA, 'sec-ch-ua-mobile': self.SEC_CH_UA_MOBILE, 'authorization': f'Bearer {self.Token}', 'x-user-id': self.TG_ID, 'sec-ch-ua-platform': self.SEC_CH_UA_PLATFORM, 'origin': 'https://cryptocklicker-frontend-rnd-prod.100hp.app', 'x-requested-with': self.X_REQUESTED_WITH, 'sec-fetch-site': 'same-site', 'sec-fetch-mode': 'cors', 'sec-fetch-dest': 'empty', 'referer': 'https://cryptocklicker-frontend-rnd-prod.100hp.app/', 'accept-language': self.ACCEPT_LANGUAGE}

        self.Empty_Request('energy_improvements_options_get') # –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å

        try:
            return [{'ID': Card['id'], 'LVL': Card['level']} for Card in self.HPV_PRO.get(URL, headers=HEADERS, proxies=self.Proxy).json() if not Card['isMaxLevel']]
        except:
            return []



    def Upgrade_Boosts(self, ID: str) -> bool:
        '''–ê–ø–≥—Ä–µ–π–¥ –±—É—Å—Ç–∞'''

        URL = self.Domain + 'energy/improvements'
        HEADERS = {'User-Agent': self.USER_AGENT, 'sec-ch-ua': self.SEC_CH_UA, 'sec-ch-ua-mobile': self.SEC_CH_UA_MOBILE, 'authorization': f'Bearer {self.Token}', 'x-user-id': self.TG_ID, 'sec-ch-ua-platform': self.SEC_CH_UA_PLATFORM, 'origin': 'https://cryptocklicker-frontend-rnd-prod.100hp.app', 'x-requested-with': self.X_REQUESTED_WITH, 'sec-fetch-site': 'same-site', 'sec-fetch-mode': 'cors', 'sec-fetch-dest': 'empty', 'referer': 'https://cryptocklicker-frontend-rnd-prod.100hp.app/', 'accept-language': self.ACCEPT_LANGUAGE}
        JSON = {'id': ID}

        self.Empty_Request('energy_improvements_options_post') # –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å

        try:
            self.HPV_PRO.post(URL, headers=HEADERS, json=JSON, proxies=self.Proxy).json()['NextLevel']
            return True
        except:
            return False



    def AutoUpgradeBoosts(self) -> None:
        '''–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–ø–≥—Ä–µ–π–¥ –±—É—Å—Ç–æ–≤'''

        try:
            for Boost in self.Get_Boosts(): # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±—É—Å—Ç–æ–≤

                # –£–ª—É—á—à–µ–Ω–∏–µ `–ó–∞–ø–∞—Å —ç–Ω–µ—Ä–≥–∏–∏` –±—É—Å—Ç–∞ (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —ë–º–∫–æ—Å—Ç—å —ç–Ω–µ—Ä–≥–∏–∏)
                if 'energylimit' in Boost['ID'] and Boost['LVL'] < MAX_ENERGY_LIMIT:
                    if self.Upgrade_Boosts(Boost['ID']):
                        self.Logging('Success', '‚ö°Ô∏è', '–ë—É—Å—Ç `–ó–∞–ø–∞—Å —ç–Ω–µ—Ä–≥–∏–∏` —É–ª—É—á—à–µ–Ω!')
                        sleep(randint(3, 6)) # –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ

                # –£–ª—É—á—à–µ–Ω–∏–µ `–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏` –±—É—Å—Ç–∞ (—Å–∫–æ—Ä–æ—Å—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–∏)
                if 'energyregen' in Boost['ID'] and Boost['LVL'] < MAX_ENERGY_REGEN:
                    if self.Upgrade_Boosts(Boost['ID']):
                        self.Logging('Success', '‚ö°Ô∏è', '–ë—É—Å—Ç `–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏` —É–ª—É—á—à–µ–Ω!')
                        sleep(randint(3, 6)) # –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ
        except:
            pass



    def _1win_Games(self) -> None:
        '''–ü—É—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–≥—Ä 1win'''

        self.Empty_Request('favicon_ico') # –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
        self.Empty_Request('Games_1win') # –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
        self.Empty_Request('wallet_list_options') # –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
        self.Empty_Request('wallet_list_get') # –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å



    def AutoUpgradeProfile(self) -> None:
        '''–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∞–ø–≥—Ä–µ–π–¥ –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–µ–∫, –ø–æ–ª—É—á–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã –∏ –∞–ø–≥—Ä–µ–π–¥ –±—É—Å—Ç–æ–≤'''

        self.AutoUpgradeCard() # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–ø–≥—Ä–µ–π–¥ –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ —É—Ä–æ–≤–Ω—è
        sleep(randint(2, 5)) # –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ
        self.AutoDailyReward() # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–ø–≥—Ä–µ–π–¥ –±—É—Å—Ç–æ–≤
        sleep(randint(2, 5)) # –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ
        self.AutoUpgradeBoosts() # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–ø–≥—Ä–µ–π–¥ –±—É—Å—Ç–æ–≤
        sleep(randint(2, 5)) # –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ



    def Run(self) -> None:
        '''–ê–∫—Ç–∏–≤–∞—Ü–∏—è –±–æ—Ç–∞'''

        while True:
            try:
                if self.Token: # –ï—Å–ª–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞

                    INFO = self.Get_Info()
                    Balance = INFO['Balance'] # –ë–∞–ª–∞–Ω—Å
                    Hour_Profit = INFO['Hour_Profit'] # –ü—Ä–∏–±—ã–ª—å –≤ —á–∞—Å
                    Click_Power = INFO['Click_Power'] # –°–∏–ª–∞ –∫–ª–∏–∫–∞
                    self.Logging('Success', 'üí∞', f'–ë–∞–ª–∞–Ω—Å: {Balance} /// –ü—Ä–∏–±—ã–ª—å –≤ —á–∞—Å: {Hour_Profit} /// –°–∏–ª–∞ –∫–ª–∏–∫–∞: {Click_Power}')


                    self.Empty_Request('user_profit_options') # –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
                    self.Empty_Request('user_profit_get') # –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
                    self.Empty_Request('Balance_7') # –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
                    self.Empty_Request('Balance_8') # –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
                    self.Empty_Request('tokens_bonus_options') # –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
                    self.Empty_Request('tokens_bonus_get') # –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å


                    # –†–∞–Ω–¥–æ–º–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π: –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π, —Å–±–æ—Ä –º–æ–Ω–µ—Ç –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤, 30 –º–∏–Ω—É—Ç –±–µ—Å–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ —Ç–∞–ø–∞–Ω—å—è –∏ –ø—É—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–≥—Ä 1win, –∞ —Ç–∞–∫–∂–µ –∞–ø–≥—Ä–µ–π–¥ –∫–∞—Ä—Ç–æ—á–µ–∫, –±—É—Å—Ç–æ–≤ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã
                    Autos = [self.AutoTasks, self.AutoRefClaim, self.AutoClick, self._1win_Games, self.AutoUpgradeProfile]
                    shuffle(Autos) # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ —Å–ø–∏—Å–æ–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π
                    for Auto in Autos:
                        Auto()
                        sleep(randint(3, 6)) # –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ


                    Waiting = randint(3*60*60, 5*60*60) # –ó–Ω–∞—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è
                    Waiting_STR = (datetime.now() + timedelta(seconds=Waiting)).strftime('%Y-%m-%d %H:%M:%S') # –ó–Ω–∞—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ —á–∏—Ç–∞–µ–º–æ–º –≤–∏–¥–µ


                    _INFO = self.Get_Info()
                    _Balance = _INFO['Balance'] # –ë–∞–ª–∞–Ω—Å
                    _Hour_Profit = _INFO['Hour_Profit'] # –ü—Ä–∏–±—ã–ª—å –≤ —á–∞—Å
                    _Click_Power = _INFO['Click_Power'] # –°–∏–ª–∞ –∫–ª–∏–∫–∞


                    self.Logging('Success', 'üí∞', f'–ë–∞–ª–∞–Ω—Å: {_Balance} /// –ü—Ä–∏–±—ã–ª—å –≤ —á–∞—Å: {_Hour_Profit} /// –°–∏–ª–∞ –∫–ª–∏–∫–∞: {_Click_Power}')
                    self.Logging('Warning', '‚è≥', f'–°–ª–µ–¥—É—é—â–∏–π —Å–±–æ—Ä: {Waiting_STR}!')


                    # –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç 3 –¥–æ 5 —á–∞—Å–æ–≤
                    Waiting_For_Upgrade = int(Waiting / (60*30))
                    for _ in range(Waiting_For_Upgrade):
                        if HPV_Upgrade_Alert(): # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                            return
                        sleep(60*30)
                    sleep(Waiting - (Waiting_For_Upgrade * 60 * 30))
                    self.ReAuthentication() # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞

                else: # –ï—Å–ª–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —É—Å–ø–µ—à–Ω–∞
                    if HPV_Upgrade_Alert(): # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                        return
                    sleep(randint(33, 66)) # –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç 33 –¥–æ 66 —Å–µ–∫—É–Ω–¥
                    self.ReAuthentication() # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞

            except:
                if HPV_Upgrade_Alert(): # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                    return







if __name__ == '__main__':

    if s_name() == 'Windows':
        sys('cls'); sys('title HPV 1win - V2.08')
    else:
        sys('clear')

    while True:
        HPV_Banner() # –í—ã–≤–æ–¥ –±–∞–Ω–Ω–µ—Ä–∞
        HPV_Config_Check() # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
        print(Fore.MAGENTA + '[HPV]' + Fore.GREEN + ' ‚Äî –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥–∞ –æ–∫–æ–Ω—á–µ–Ω–∞... –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...\n'); sleep(5)

        Console_Lock = Lock()
        Threads = [] # –°–ø–∏—Å–æ–∫ –ø–æ—Ç–æ–∫–æ–≤

        def Start_Thread(Name: str, URL: str, Proxy: dict, Headers: dict) -> None:
            _1win = HPV_1win(Name, URL, Proxy, Headers)
            _1win.Run()

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –∑–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–æ–≤
        for Account in HPV_Get_Config(_print=False):
            HPV = Thread(target=Start_Thread, args=(Account['Name'], Account['URL'], Account['Proxy'], Account['Headers'],))
            HPV.start()
            Threads.append(HPV)

        for thread in Threads:
            thread.join()


